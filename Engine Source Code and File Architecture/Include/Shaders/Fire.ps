/*
 * File name - Fire.ps
 * Author - CuiXue
 * Updated date - 2013.7.8
 * Desc - 
 *
 */


 // Globals
 Texture2D fireTex : register(t0);
 Texture2D noiseTex : register(t1);
 Texture2D alphaTex : register(t2);
 SamplerState sampleState;
 SamplerState sampleState_clamp;

 // Constant Buffer
 cbuffer DistortionBuffer
 {
	float2 distortion1;
	float2 distortion2;
	float2 distortion3;
	float distortionScale;
	float distortionBias;
 };

 // Input sturcture
 struct PS_INPUT
 {
	float4 position : SV_POSITION;
	float2 tex		: TEXCOORD0;
	float2 texcoord1: TEXCOORD1;
	float2 texcoord2: TEXCOORD2;
	float2 texcoord3: TEXCOORD2;
 };

 float4 FirePS(PS_INPUT input) : SV_TARGET
 {
	float4 noise1;
	float4 noise2;
	float4 noise3;
	float4 result_noise;
	float4 fire_color;
	float4 alpha_color;
	float2 noise_coords;
	float  perturb;

	noise1 = noiseTex.Sample(sampleState, input.texcoord1);
	noise2 = noiseTex.Sample(sampleState, input.texcoord2);
	noise3 = noiseTex.Sample(sampleState, input.texcoord3);

	noise1 = (noise1 - 0.5f) * 2.0f;
	noise2 = (noise2 - 0.5f) * 2.0f;
	noise3 = (noise3 - 0.5f) * 2.0f;

	noise1.xy = noise1.xy * distortion1.xy;
	noise2.xy = noise2.xy * distortion2.xy;
	noise3.xy = noise3.xy * distortion3.xy;

	result_noise = noise1 + noise2 + noise3;

	perturb = ((1.0f - input.tex.y) * distortionScale) + distortionBias;

	noise_coords.xy = (result_noise.xy * perturb) + input.tex.xy;

	fire_color = fireTex.Sample(sampleState_clamp, noise_coords.xy);
	
	alpha_color = alphaTex.Sample(sampleState_clamp, noise_coords.xy);

	fire_color.a = alpha_color;

	return fire_color;
 };