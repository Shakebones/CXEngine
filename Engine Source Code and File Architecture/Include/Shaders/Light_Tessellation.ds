/*
 * File name - Light_Tesselation.ds
 * Author - CuiXue
 * Updated date - 2015.5.7
 * Desc -
 *
 */

cbuffer MatrixBuffer
{
	matrix worldMatrix;
	matrix viewMatrix;
	matrix projectionMatrix;
};

cbuffer CameraBuffer
{
	float3 cameraPosition;
	float padding;
};

struct ConstantOutputType
{
	float edges[3]: SV_TessFactor;
	float inside: SV_InsideTessFactor;
};

struct HullOutputType
{
	float4 position			: POSITION;
	float2 tex				: TEXCOORD0;	
	float3 normal			: NORMAL;
	float3 viewDirection	: TEXCOORD1;
};

struct PixelInputType
{
	float4 position : SV_POSITION;
	float2 tex		: TEXCOORD0;
	float3 normal	: NORMAL;
	float3 viewDirection : TEXCOORD1;
};

[domain("tn")]
PixelInputType LightDomainShader(ConstantOutputType input, float3 uvwCoord: SV_DomainLocation, 
								 const OutputPatch<HullOutputType, 3> patch)
{
	float3 vertexPosition;
	PixelInputType output = (PixelInputType)0;

	vertexPosition = uvwCoord.x * patch[0].position + 
					 uvwCoord.y * patch[1].position + 
					 uvwCoord.z * patch[2].position;

	output.position = mul(float4(vertexPosition, 1.0f), worldMatrix);
	output.position = mul(output.position, viewMatrix);
	output.position = mul(output.position, projectionMatrix);

	// Compute normals


	return output;
}