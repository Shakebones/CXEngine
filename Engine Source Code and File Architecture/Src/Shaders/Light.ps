/*
 * File name - Light.ps
 * Author - CuiXue
 * Updated date - 2012.12.21
 * Desc -
 *
 */
Texture2D shaderTexture;
SamplerState SampleType;

cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor;
	float3 direction;
	float specularPower;
	float4 specularColor;
};

struct PixelInputType
{
	float4 position : SV_POSITION;
	float2 tex		: TEXCOORD0;
	float3 normal	: NORMAL;
	float3 viewDirection : TEXCOORD1;
};

float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
	float4 textureColor;
	float3 lightDir;
	float lightIntensity;
	float4 color;
	float3 reflection;
	float4 specular;
	float4 diff;

	// 通过指定的采样状态，对输入纹理进行采样
	textureColor = shaderTexture.Sample(SampleType, input.tex);

	// 设置 specular 初始值
	specular = float4(0.0f, 0.0f, 0.0f, 0.0f);

	// 先设置像素为环境光色彩
	color = ambientColor + textureColor;

	lightDir = -direction;

	// 当前像素位置的接收的光线与表面法线的夹角，来决定像素明暗
	lightIntensity = saturate(dot(input.normal, lightDir));

	// 如果光强大于零，计算 “镜面光/环境光/漫射光” 综合效果
	if( lightIntensity >  0.0f )
	{
		color += (diffuseColor * lightIntensity);

		color = saturate(color);

		reflection = normalize(2 * lightIntensity * input.normal - lightDir);

		specular = pow(saturate(dot(reflection, input.viewDirection)), specularPower);
	}

	// 最后将所有颜色综合赋予当前位置的像素，并返回
	// color = color * textureColor;

	color = saturate(color + specular * specularColor);

	return color;
}